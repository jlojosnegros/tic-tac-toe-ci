node
{
    stage ('Checkout')
    {
        GERRIT_IP = sh (
               script: 'docker inspect -f \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' codeurjc-forge-gerrit',
               returnStdout: true
               ).trim()


        git url: 'http://' + GERRIT_IP + ':8080/tic-tac-toe'
    }
    stage ('Test')
    {
        try
        {
            docker.image('maven').inside('-p 12345:8080 -v $HOME/.m2:/root/.m2 ' + '-v /var/run/docker.sock:/var/run/docker.sock')
            {
                sh 'mvn -Dtest=SeleniumSytemTest test'
            }
        }
        catch (Exception err)
        {
            sh 'return -1'
        }
        finally
        {
            archiveArtifacts '**/target/*.flv'
            junit testResults: '**/target/surefire-reports/*.xml', keepLongStdio: true
        }

    }

    stage('Build Target')
    {
        docker.image('maven').inside('-v $HOME/.m2:/root/.m2')
        {
            sh ' mvn package -DskipTests -Dmaven.test.skip=true'
        }
    }

    stage ('Docker image')
    {
	docker.image('maven').inside('-p 12345:8080 -v $HOME/.m2:/root/.m2 ' + '-v /var/run/docker.sock:/var/run/docker.sock')
	{
	   sh 'docker login -u practicacimasterupm -p 12341234'
	   sh 'chmod 777 ./build-and-push-nightly-image.sh'
    	   sh './build-and-push-nightly-image.sh'
	}
    }

    stage ('execute test with docker image')
    {
	return 0
    }

    stage ('Docker image final')
    {
	docker.image('maven').inside('-p 12345:8080 -v $HOME/.m2:/root/.m2 ' + '-v /var/run/docker.sock:/var/run/docker.sock')
	{
		sh 'docker login -u practicacimasterupm -p 12341234'
		sh 'chmod 777 ./build-and-push-nightly-tested-image.sh'
    		sh './build-and-push-nightly-tested-image.sh'
	}
    }
}
