node
{
    stage ('Checkout')
    {
        GERRIT_IP = sh (
               script: 'docker inspect -f \'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\' codeurjc-forge-gerrit',
               returnStdout: true
               ).trim()


        git url: 'http://' + GERRIT_IP + ':8080/tic-tac-toe'
    }

    stage ('Unit and System Test')
    {
        try
        {
            docker.image('maven').inside('-p 12345:8080 -v $HOME/.m2:/root/.m2 ' + '-v /var/run/docker.sock:/var/run/docker.sock')
            {
                sh 'mvn -Dtest=BoardTest,TicTacToeGameTest,TicTacToeGamePlayTest,SeleniumSytemTest test'
            }
        }
        catch (Exception err)
        {
            sh 'return -1'
        }
        finally
        {
            archiveArtifacts '**/target/*.flv'
            junit testResults: '**/target/surefire-reports/*.xml', keepLongStdio: true
        }

    }

    stage('Build Target')
    {
        docker.image('maven').inside('-v /var/run/docker.sock:/var/run/docker.sock')
        {
            sh ' mvn package -DskipTests -Dmaven.test.skip=true'
        }
    }

    stage ('Docker image')
    {
        docker.image('maven').inside('-v /tmp:/tmp')
        {
            version = sh (
                script:'mvn -q -Dexec.executable="echo" -Dexec.args=\'${project.version}\' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec',
                returnStdout: true
                ).trim()
            println version
            sh 'chmod 777 ./calculate-docker-nightly-tag.sh'
            tag = sh (
                script: './calculate-docker-nightly-tag.sh ' + version,
                returnStdout: true
                ).trim()
            println tag
            println "... tag file ..."
            writeFile file: "/tmp/tag", text: tag
        }
        println "reading tag file outside docker.inside"
        def tag = readFile('/tmp/tag').trim()

        sh 'chmod 777 ./build-and-push-image.sh'
        sh './build-and-push-image.sh ' + tag
    }

    stage ('execute test with docker image')
    {
        return 0
    }

    stage ('Docker image final')
    {
        sh 'chmod 777 ./build-and-push-image.sh'
        sh './build-and-push-image.sh ' + 'nightly'
    }
}
